//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital circuit analyzer
//  @ File Name : Scheduler.cpp
//  @ Date : 20.4.2013
//  @ Author : Lazar Kovacevic
//
//


#include "Scheduler.h"

Scheduler* Scheduler::Instance()
{
	static Scheduler instance;
	return &instance;
}

void Scheduler::put(Event* e)
{
	if (e==0) return;
	Time time = e->getTime();
	Event* nxt = first;
	Event* prv = 0;
	bool glitch = false;
	
	while (nxt!=0 && time >= nxt->getTime())    // go through list and place event where it should be
	{			
		prv = nxt;
		nxt = nxt->getNext();

		if(nxt!=0)
		{
			if(checkGlitch(e, nxt))
			{
				glitch=true;
				break;
			}
		}
	}	

	if(!glitch)
	{
		e->setNext(nxt);
		if (prv!=0) 
			prv->setNext(e); 
		else
			first = e; 
	}

	else
		prv->setNext(nxt->getNext());			

}

Scheduler::Scheduler()
:	curTime(0), first(0)
{

}

bool Scheduler::processOneEvent()
{
	Event* e = first;
	if (e==0) return false;	
	curTime = e->getTime();

	ModelElement* el = e->getTarget();
	if (el) el->notify(e->getDescription());
	first = first->getNext();
	delete e;
	return (first && first->getTime()==0);
}

bool Scheduler::processNow()
{
	while (processOneEvent());
	return (first!=0);
}

bool Scheduler::checkGlitch(Event* e1, Event* e2)
{
	Event* first;
	Event* second;

	Time t = e1->getTime()-e2->getTime();
	if(t>0)
	{
		first=e2;
		second=e1;
	}

	else if(t<=0)
	{
		first=e1;
		second=e2;
	}

	t=fabs(t);

	if(first->getID()==second->getID())
	{
		if(first->getDescription()==RisingEdge && second->getDescription()==FallingEdge && t < fabs(first->getTarget()->getDelay1to0()))
			return true;
		else if(first->getDescription()==FallingEdge && second->getDescription()==RisingEdge && t < fabs(first->getTarget()->getDelay0to1()))
			return true;
		else 
			return false;
	}
	else
		return false;

}


Time Scheduler::getCurTime()
{
	return curTime;
}
