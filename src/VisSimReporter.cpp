//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital Circuit  Analyzer
//  @ File Name : VisSimReporter.cpp
//  @ Date : 21.4.2013
//  @ Author : Lazar Kovacevic
//
//


#include "VisSimReporter.h"
#include <sstream>

using namespace std;


void VisSimReporter::visitDigitalProbe(DigitalProbe*  digp)
{
	string name = Reader::Instance()->getData()->getFileName();
	string path = Reader::Instance()->getData()->getOutPath();
	//name=name.substr(name.find(':') + 3);
	//name=name.substr(0, name.length()-name.substr(name.find('.')).length());		//skida ekstenziju
	//name=name+"_";
	int nnum = digp->getId();

	string num;
	ostringstream convert;
	convert << nnum;
	num = convert.str();

//	int Number = 123;       // number to be converted to a string
//	string Result;          // string which will contain the result
//	ostringstream convert;   // stream used for the conversion
//	convert << Number;      // insert the textual representation of 'Number' in the characters in the stream
//	Result = convert.str(); // set 'Result' to the contents of the stream

	if(path.empty())
	{
		writeChanges(cout, digp);
	}

	else
	{
		string outFileName=path + "sonda_" /*+ name*/ + num + ".log";

		ofstream outFile(outFileName.c_str(), ios::out);

		writeChanges(outFile, digp);

		outFile.close();
	}
}

void VisSimReporter::writeChanges(ostream& output, DigitalProbe* dp)
{

//	vector<SignalChange>::iterator it = dp->getChanges().begin();
//	int num_changes = dp->getChanges().size();
//	int cntChanges=0;
//
//	stringstream ss;
//
//	ss << dp->getChanges()[i].prevValue
//	   << "->"
//	   << dp->getChanges()[i].nextValue

    stringstream time;
    stringstream direction;

    // get length of time string for tab count formating output
    int curr_time_size=0;

	for(unsigned int i = 0; i<dp->getChanges().size();i++)
	{

		direction	   << dp->getChanges()[i].prevValue
					   << "->"
					   << dp->getChanges()[i].nextValue;

        stringstream time_hlp;

        time_hlp       << fixed
                       << setprecision(3)
                       << dp->getChanges()[i].timeOfChange
                       << "us";

        curr_time_size = time_hlp.str().size();

	    time		   << time_hlp.str();

        if ((i+1)%4 == 0 || i==dp->getChanges().size()-1)
        {
            output  << direction.str()
                    << endl
                    << time.str();
            if (i!=dp->getChanges().size()-1)

            output  << endl
                    << endl
                    << endl;


            time.str("");
            time.clear();
            direction.str("");
            direction.clear();
        }
        else
        {
            direction << "\t\t";

            if(curr_time_size < 8)
                time << "\t\t";
            else 
                time << "\t";
        }

	}
}

