//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital Circuit Analyzer
//  @ File Name : ImpulsSource.cpp
//  @ Date : 7.4.2013
//  @ Author : Lazar Kovacevic
//
//


#include "ImpulsSource.h"

ImpulsSource::ImpulsSource(ID i, Frequency f, SignalValue val, Time t)
:	DigitalSource(), impulsLevel(val), frequency(f), impulsActiveTime(t), flag(true)
{
	ModelElement::setId(i);
	Model::Instance()->add(this);
	turnOn();

	Time firstEvent=impulsActiveTime;
	Reader::Instance()->getData()->setTOFE(firstEvent);
}

void ImpulsSource::acceptVisitor(Visitor* v)
{
	v->visitISource(this);
}

SignalValue ImpulsSource::getImpulsLeve()
{
	return impulsLevel;
}

Frequency ImpulsSource::getFrequency()
{
	return frequency;
}

Time ImpulsSource::getImpulsTime()
{
	return impulsActiveTime;
}

ImpulsSource::~ImpulsSource()
{

}

void ImpulsSource::notify(Description descr) // TODO: wtf?
{
	process();

	if(flag)
	{
		Time t = impulsActiveTime + Scheduler::Instance()->getCurTime();
		if(impulsLevel==0)
			Event::create(this, t, ModelElement::getId(), RisingEdge);
		else
			Event::create(this, t, ModelElement::getId(), FallingEdge);
		flag=false;
	}
	else
	{
		Time t = (1.0/frequency)*1000000 - impulsActiveTime + Scheduler::Instance()->getCurTime();
		if(impulsLevel==0)
			Event::create(this, t, ModelElement::getId(), FallingEdge);
		else
			Event::create(this, t, ModelElement::getId(), RisingEdge);
		flag=true;
	}
}

void ImpulsSource::turnOn()
{

	Time t=0;
	if(impulsLevel==1)
		Event::create(this, t, ModelElement::getId(), RisingEdge);
	
	else
	{
		changeOutPinVal();
		Event::create(this, t, ModelElement::getId(), FallingEdge);
	}

}
