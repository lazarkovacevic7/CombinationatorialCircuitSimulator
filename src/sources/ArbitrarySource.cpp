//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital Circuit Analyzer
//  @ File Name : ArbitrarySource.cpp
//  @ Date : 7.4.2013
//  @ Author : Lazar Kovacevic
//
//

#include "ArbitrarySource.h"

ArbitrarySource::ArbitrarySource(SignalValue val, Time* moments,
		unsigned int num) :
		DigitalSource(), initialValue(val), numberOfChanges(num), counter(0)
{
	for (unsigned int j = 0; j < numberOfChanges; j++)
		momentsOfChange[j] = moments[j];
	turnOn();
}

SignalValue ArbitrarySource::getInitialValue()
{
	return initialValue;
}

Time ArbitrarySource::getMomOfChange(unsigned int i)
{
	return momentsOfChange[i];
}

unsigned int ArbitrarySource::getNumOfChanges()
{
	return numberOfChanges;
}

void ArbitrarySource::acceptVisitor(Visitor* v)
{
	v->visitASource(this);
}

ArbitrarySource::~ArbitrarySource()
{

}

void ArbitrarySource::notify(Description descr)
{
	process();
	if (counter < numberOfChanges)
	{
		if (descr == FallingEdge)
			Event::create(this, momentsOfChange[counter], ModelElement::getId(),
					RisingEdge);
		else
			Event::create(this, momentsOfChange[counter], ModelElement::getId(),
					FallingEdge);
		counter++;
	}

}

void ArbitrarySource::turnOn()
{
	Time t = 0;

	if (initialValue == 0)
	{
		Event::create(this, t, ModelElement::getId(), FallingEdge);
		changeOutPinVal();
	}
	else
	{
		Event::create(this, t, ModelElement::getId(), RisingEdge);
	}

}
