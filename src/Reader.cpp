//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital Circuit Analyzer
//  @ File Name : Reader.cpp
//  @ Date : 7.4.2013
//  @ Author : Lazar Kovacevic
//
//


#include "Reader.h"
#include "stdlib.h"
#include <cstdlib>



Reader::Reader()
{
	data = new Data();
}

Reader* Reader::Instance ()
{
	static Reader instance;
	return &instance;
}

Reader::~Reader()
{
	delete data;
}

void Reader::readData(char* fileName, char* outPath) 
{
	data->setOutPath(outPath);	//provera sa greskma...
	data->setFileName(fileName);
	listing(fileName);
}

void Reader::listing(char* fileName)
{
	ifstream inputFile(fileName, ios::in);
	char* buffer = new char[255];
	inputFile.getline(buffer,255);
	Time simTime=atof(buffer);
	
	data->setSimTime(simTime);

	inputFile.getline(buffer, 255);
	unsigned int num=atoi(buffer);

	data->setNumberOfElements(num);	

	string BUFFER;

	bool tab=false;
	

	for(unsigned int i=0; i<num; i++) 
	{
		inputFile.getline(buffer, 255);
		BUFFER = string(buffer);

		string sid;
		string stype;

		for(unsigned int i=0; i<BUFFER.length();i++)			//da li ima '\t' u stringu
			if(BUFFER[i]=='\t') 
			{
				tab=true;
				break;
			}
		if(tab)
		{
			stype=BUFFER.substr(BUFFER.find('\t'));
			sid=BUFFER.substr(0, BUFFER.length()- stype.length());

		}
		else
		{	
		
			sid=BUFFER.substr(0, BUFFER.find(' '));
			BUFFER=BUFFER.substr(BUFFER.find(' ')+1);

			stype=BUFFER;
		}

		ID id = atoi(sid.c_str());
		Type type = atoi(stype.c_str());
		
											
		if(type==1 || type==2 || type==3 || type==4 || type==0)		
			 data->addElement(new Gate(id,type));		//ovde broj gejtove
		
		if(type==5)		
			data->addElement(new Source(id,type));	
		
		if(type==6) 		
			data->addElement(new Probe(id,type));
		
		
	}

	while(true)
	{		
		inputFile.getline(buffer, 256);
		BUFFER = string(buffer);

		string sidO=BUFFER.substr(0, BUFFER.find(' '));
		BUFFER=BUFFER.substr(BUFFER.find(' ')+1);

		string spinO=BUFFER.substr(0, BUFFER.find(' '));
		BUFFER=BUFFER.substr(BUFFER.find(' ')+1);

		string sidI=BUFFER.substr(0, BUFFER.find(' '));
		BUFFER=BUFFER.substr(BUFFER.find(' ')+1);

		
		string spinI=BUFFER.substr(0, BUFFER.find(' '));

		BUFFER=string(buffer);

		bool flag = false;

		if(BUFFER.length() - sidO.length() - spinO.length() - sidI.length() - spinI.length() -3 > 0)
			flag = true;

				
		ID idX = atoi(sidO.c_str());
		ID idY = atoi(sidI.c_str());
		unsigned int pinX = atoi(spinO.c_str());
		unsigned int pinY = atoi(spinI.c_str());

		if(sidO.empty() || sidI.empty() || spinO.empty() || spinI.empty() || pinX>3 || pinY>3 || pinX<0 || pinY<0 || flag)				
			break;	

		ConnectionDescription* cd = new ConnectionDescription(idX, pinX, idY, pinY);

		data->addConnDescr(cd);
	

	}

	while (!BUFFER.empty())
	{
		
		string ssid=BUFFER.substr(0, BUFFER.find(' '));
		BUFFER=BUFFER.substr(BUFFER.find(' ')+1);

		string ssDescr=BUFFER;
		
		ID sid=atoi(ssid.c_str());

		sourceInitialize(sid, ssDescr);

		inputFile.getline(buffer, 256);

		BUFFER = string(buffer);

	}

	delete buffer;
}

void Reader::sourceInitialize(unsigned int id, string descr)
{
	string sType=descr.substr(0,descr.find(' '));
	unsigned int type = atoi(sType.c_str());

	descr=descr.substr(descr.find(' ')+1);

	Frequency freq = atoi(descr.c_str());

	if(type==3)
	{

		for(unsigned int i=0; i<data->getElements().size();i++)
		{
			if(data->getElements()[i]->getId()==id)
			{
				CLKSource* s = new CLKSource();
				s->setFrequency(freq);
				s->setID(data->getElements()[i]->getId());
								
				data->deleteElement(i);
				data->addElement(s);
			}

		}
		
	}
	
	if(type==1)
	{
		string siVal=descr.substr(0,descr.find(' '));		
		descr=descr.substr(descr.find(' ')+1);

		string siTime=descr.substr(descr.find(' ')+1);
		string siFreq=descr.substr(0, descr.length()-siTime.length());

		SignalValue iVal = atoi(siVal.c_str());
		Time iTime = atoi(siTime.c_str());
		Frequency iFreq = atoi(siFreq.c_str());

		for(unsigned int i=0; i<data->getElements().size();i++)
		{
			if(data->getElements()[i]->getId()==id)
			{
				ISource* s = new ISource();			//Ove konstruktore mozda treba prepraviti!
				s->setFrequency(iFreq);
				s->setImpulsLevel(iVal);
				s->setImpulsTime(iTime);
				
				s->setID(data->getElements()[i]->getId());

				data->deleteElement(i);
				data->addElement(s);
			}

		}
		
	}
	if(type==2)
	{
		string siVal=descr.substr(0, descr.find(' '));
		descr=descr.substr(descr.find(' ')+1);

		SignalValue iVal = atoi(siVal.c_str());


		Time moments[ASOURCE_MAXNUMOFCHANGES];
		unsigned int t=0;
		int tmp =0;
		
		do 
		{
			string stmp = descr.substr(0, descr.find(' '));
			tmp = atoi(stmp.c_str());
			descr=descr.substr(descr.find(' ')+1);
			moments[t++]=tmp;

		}
		while(tmp!=-1);

		for(unsigned int i=0; i<data->getElements().size();i++)
		{
			if(data->getElements()[i]->getId()==id)
			{
				ASource* s = new ASource();
				s->setInitialVal(iVal);

				for(unsigned int t=0;moments[t]!=-1 ;t++)
					s->setMomOfChange(moments[t]);
				
				s->setID(data->getElements()[i]->getId());
								
				data->deleteElement(i);
				data->addElement(s);
			}

		}

	}

}

Data* Reader::getData()
{
	return data;
}

