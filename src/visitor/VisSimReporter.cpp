//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital Circuit  Analyzer
//  @ File Name : VisSimReporter.cpp
//  @ Date : 21.4.2013
//  @ Author : Lazar Kovacevic
//
//

#include "VisSimReporter.h"
#include <sstream>

using namespace std;

void VisSimReporter::visitDigitalProbe(DigitalProbe* digp)
{
	string name = Reader::Instance()->getData()->getFileName();
	string path = Reader::Instance()->getData()->getOutPath();
	int nnum = digp->getId();

	string num;
	ostringstream convert;
	convert << nnum;
	num = convert.str();

	if (path.empty())
	{
		writeChanges(cout, digp);
	}

	else
	{
		string outFileName = path + "sonda_" /*+ name*/+ num + ".log";

		ofstream outFile(outFileName.c_str(), ios::out);

		writeChanges(outFile, digp);

		outFile.close();
	}
}

void VisSimReporter::writeChanges(ostream& output, DigitalProbe* dp)
{

	stringstream time;
	stringstream direction;

	// get length of time string for tab count formating output
	int curr_time_size = 0;

	for (unsigned int i = 0; i < dp->getChanges().size(); i++)
	{

		direction << dp->getChanges()[i].prevValue << "->"
				<< dp->getChanges()[i].nextValue;

		stringstream time_hlp;

		time_hlp << fixed << setprecision(3) << dp->getChanges()[i].timeOfChange
				<< "us";

		curr_time_size = time_hlp.str().size();

		time << time_hlp.str();

		if ((i + 1) % 4 == 0 || i == dp->getChanges().size() - 1)
		{
			output << direction.str() << endl << time.str();
			if (i != dp->getChanges().size() - 1)

				output << endl << endl << endl;

			time.str("");
			time.clear();
			direction.str("");
			direction.clear();
		}
		else
		{
			direction << "\t\t";

			if (curr_time_size < 8)
				time << "\t\t";
			else
				time << "\t";
		}

	}
}

