//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Digital Circuit  Analyzer
//  @ File Name : visStatistics.cpp
//  @ Date : 28.5.2013
//  @ Author : Lazar Kovacevic
//
//

#include "visStatistics.h"


using namespace std;

visStatistics::visStatistics():
		ANDnum(0),
		NANDnum(0),
		NORnum(0),
		ORnum(0),
		NOTnum(0),
		ASourceNum(0),
		ClkSourceNum(0),
		ISourceNum(0),
		probeNum(0)
{

}

void visStatistics::visitDigitalProbe(DigitalProbe* dp)
{
	probeNum++;

	ID idM = dp->getId();
	string descrM ="Sonda";

	ID* idT=0;
	string descrT="Sonda nema izlaze";

	ID idS[MAXNUMOFSOURCEIDS]={dp->source->getId()};
	string descrS="ulaz Sonde je povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, 0, 1));	

}

void visStatistics::visitAndGate(AND* gate)
{
	ANDnum++;

	ID idM = gate->getId();
	string descrM ="I kolo";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = gate->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=gate->target[i]->getId();
	string descrT="Izlaz gejta je povezan sa";

	ID idS[MAXNUMOFSOURCEIDS]={gate->source[0]->getId(), gate->source[1]->getId()};
	string descrS="ulazi gejta su povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 2));	
}

void visStatistics::visitNandGate(NAND* gate)
{
	NANDnum++;

	ID idM = gate->getId();
	string descrM ="NI kolo";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = gate->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=gate->target[i]->getId();
	string descrT="Izlaz gejta je povezan sa";

	ID idS[MAXNUMOFSOURCEIDS]={gate->source[0]->getId(), gate->source[1]->getId()};
	string descrS="ulazi gejta su povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 2));	
}

void visStatistics::visitOrGate(OR* gate)
{
	ORnum++;

	ID idM = gate->getId();
	string descrM ="ILI kolo";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = gate->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=gate->target[i]->getId();
	string descrT="Izlaz gejta je povezan sa";

	ID idS[MAXNUMOFSOURCEIDS]={gate->source[0]->getId(), gate->source[1]->getId()};
	string descrS="ulazi gejta su povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 2));
	
}

void visStatistics::visitNorGate(NOR* gate)
{
	NORnum++;

	ID idM = gate->getId();
	string descrM ="NILI kolo";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = gate->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=gate->target[i]->getId();
	string descrT="Izlaz gejta je povezan sa";

	ID idS[MAXNUMOFSOURCEIDS]={gate->source[0]->getId(), gate->source[1]->getId()};
	string descrS="ulazi gejta su povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 2));	
}

void visStatistics::visitNotGate(NOT* gate)
{
	NOTnum++;

	ID idM = gate->getId();
	string descrM ="NE kolo";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = gate->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=gate->target[i]->getId();
	string descrT="Izlaz gejta je povezan sa";

	ID idS[MAXNUMOFSOURCEIDS]={gate->source[0]->getId()};
	string descrS="ulazi gejta su povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 1));	
}

void visStatistics::visitASource(ArbitrarySource* source)
{
	ASourceNum++;

	ID idM = source->getId();
	string descrM ="Izvor sa Rucnim podesavanjem";

	ID* idS=0;
	string descrS="Izvor nema ulaze";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = source->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=source->target[i]->getId();
	string descrT="Izlaz Izvora je povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 0));	

}

void visStatistics::visitISource(ImpulsSource* source)
{
	ISourceNum++;

	ID idM = source->getId();
	string descrM ="Impulsni Izvor";

	ID* idS=0;
	string descrS="Izvor nema ulaze";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = source->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=source->target[i]->getId();
	string descrT="Izlaz Izvora je povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 0));
}

void visStatistics::visitClkSource(ClockSource* source)
{
	ClkSourceNum++;

	ID idM = source->getId();
	string descrM ="Izvor takta(clock)";

	ID* idS=0;
	string descrS="Izvor nema ulaze";

	ID idT[MAXNUMOFTARGETIDS];
	unsigned int numT = source->getNumOfTargets();
	for(unsigned int i=0; i<numT;i++)
		idT[i]=source->target[i]->getId();
	string descrT="Izlaz Izvora je povezan sa";

	descriptions.push_back(StatDescr(descrM, descrT, descrS, idM, idT, idS, numT, 0));
}

void visStatistics::writeStats()
{
	string outPath = Reader::Instance()->getData()->getOutPath();
	string outFileName = outPath + "statistika.log";
	ofstream outFile(outFileName.c_str(), ios::out);

	outFile		<<"broj izvora signala takta: "<<ClkSourceNum<<endl
				<<"broj impulsnih izvora: "<<ISourceNum<<endl
				<<"broj rucno podesivih izvora: "<<ASourceNum<<endl
				<<"broj I kola: "<<ANDnum<<endl
				<<"broj ILI kola: "<<ORnum<<endl
				<<"broj NE kola: "<<NOTnum<<endl
				<<"broj NI kola: "<<NANDnum<<endl
				<<"broj NILI kola: "<<NORnum<<endl
				<<"broj sondi: "<<probeNum<<endl;
	
	for(unsigned int i=0;i<descriptions.size();i++)
	{
		outFile		<<"________________________________________"
					<<endl
					<<"----------------------------------------"
					<<endl
					<<"id "<<descriptions[i].idMain
					<<", "
					<<descriptions[i].descrMain
					<<endl
					<<"----------------------------------------"
					<<endl
					<<descriptions[i].descr2
					<<' ';

		for(unsigned int j=0; j<descriptions[i].getNumT();j++)
		{
			outFile		<<descriptions[i].targets[j];
			if(j==(descriptions[i].getNumT() - 1))
				break;
			outFile		<<", ";
		}

		outFile		<<endl
					<<descriptions[i].descr3
					<<' ';

		for(unsigned int j=0; j<descriptions[i].getNumS();j++)
		{
			outFile		<<descriptions[i].sources[j];
			if(j==(descriptions[i].getNumS() - 1))
				break;
			outFile		<<", ";
		}

		outFile		<<endl
					<<"________________________________________"
					<<endl
					<<"***"
					<<endl
					<<"***"
					<<endl;
	}
	outFile.close();
}
